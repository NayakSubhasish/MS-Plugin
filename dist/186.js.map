{"version":3,"file":"186.js","mappings":";ubACAA,EAAA,kBAAAC,CAAA,MAAAC,EAAAD,EAAA,GAAAE,EAAAC,OAAAC,UAAAC,EAAAH,EAAAI,eAAAC,EAAA,mBAAAC,OAAAA,OAAA,GAAAC,EAAAF,EAAAG,UAAA,aAAAC,EAAAJ,EAAAK,eAAA,kBAAAC,EAAAN,EAAAO,aAAA,yBAAAC,EAAAd,EAAAD,EAAAE,EAAAG,GAAA,OAAAF,OAAAa,eAAAf,EAAAD,EAAA,CAAAiB,MAAAf,EAAAgB,YAAAb,EAAAc,cAAAd,EAAAe,UAAAf,GAAA,KAAAU,EAAA,aAAAd,GAAAc,EAAA,SAAAd,EAAAD,EAAAE,GAAA,OAAAD,EAAAD,GAAAE,CAAA,WAAAmB,EAAArB,EAAAE,EAAAG,EAAAE,GAAA,IAAAE,EAAAP,GAAAA,EAAAE,qBAAAkB,EAAApB,EAAAoB,EAAAX,EAAAR,OAAAoB,OAAAd,EAAAL,WAAA,OAAAW,EAAAJ,EAAA,mBAAAX,EAAAE,EAAAG,GAAA,IAAAE,EAAA,kBAAAE,EAAAE,GAAA,OAAAJ,EAAA,MAAAiB,MAAA,uCAAAjB,EAAA,cAAAE,EAAA,MAAAE,EAAA,OAAAM,MAAAhB,EAAAwB,MAAA,OAAApB,EAAAqB,OAAAjB,EAAAJ,EAAAsB,IAAAhB,IAAA,KAAAE,EAAAR,EAAAuB,SAAA,GAAAf,EAAA,KAAAE,EAAAc,EAAAhB,EAAAR,GAAA,GAAAU,EAAA,IAAAA,IAAAe,EAAA,gBAAAf,CAAA,cAAAV,EAAAqB,OAAArB,EAAA0B,KAAA1B,EAAA2B,MAAA3B,EAAAsB,SAAA,aAAAtB,EAAAqB,OAAA,QAAAnB,EAAA,MAAAA,EAAA,EAAAF,EAAAsB,IAAAtB,EAAA4B,kBAAA5B,EAAAsB,IAAA,gBAAAtB,EAAAqB,QAAArB,EAAA6B,OAAA,SAAA7B,EAAAsB,KAAApB,EAAA,MAAAc,EAAAc,EAAAnC,EAAAE,EAAAG,GAAA,cAAAgB,EAAAe,KAAA,IAAA7B,EAAAF,EAAAoB,KAAA,IAAAJ,EAAAM,MAAAG,EAAA,gBAAAb,MAAAI,EAAAM,IAAAF,KAAApB,EAAAoB,KAAA,WAAAJ,EAAAe,OAAA7B,EAAA,EAAAF,EAAAqB,OAAA,QAAArB,EAAAsB,IAAAN,EAAAM,IAAA,IAAA3B,EAAAK,EAAA,IAAAgC,EAAA9B,GAAA,SAAAI,CAAA,UAAAwB,EAAAlC,EAAAD,EAAAE,GAAA,WAAAkC,KAAA,SAAAT,IAAA1B,EAAAqC,KAAAtC,EAAAE,GAAA,OAAAD,GAAA,OAAAmC,KAAA,QAAAT,IAAA1B,EAAA,EAAAD,EAAAuC,KAAAlB,EAAA,IAAAS,EAAA,YAAAR,IAAA,UAAAkB,IAAA,UAAAC,IAAA,KAAAC,EAAA,GAAA3B,EAAA2B,EAAAjC,GAAA,8BAAAkC,EAAAxC,OAAAyC,eAAAC,EAAAF,GAAAA,EAAAA,EAAAG,EAAA,MAAAD,GAAAA,IAAA3C,GAAAG,EAAAiC,KAAAO,EAAApC,KAAAiC,EAAAG,GAAA,IAAAE,EAAAN,EAAArC,UAAAkB,EAAAlB,UAAAD,OAAAoB,OAAAmB,GAAA,SAAAM,EAAA/C,GAAA,0BAAAgD,SAAA,SAAAjD,GAAAe,EAAAd,EAAAD,GAAA,SAAAC,GAAA,YAAAiD,QAAAlD,EAAAC,EAAA,gBAAAkD,EAAAlD,EAAAD,GAAA,SAAAE,EAAAK,EAAAE,EAAAE,EAAAE,GAAA,IAAAE,EAAAoB,EAAAlC,EAAAM,GAAAN,EAAAQ,GAAA,aAAAM,EAAAqB,KAAA,KAAAf,EAAAN,EAAAY,IAAAG,EAAAT,EAAAJ,MAAA,OAAAa,GAAA,UAAAsB,EAAAtB,IAAAzB,EAAAiC,KAAAR,EAAA,WAAA9B,EAAAqD,QAAAvB,EAAAwB,SAAAC,MAAA,SAAAtD,GAAAC,EAAA,OAAAD,EAAAU,EAAAE,EAAA,aAAAZ,GAAAC,EAAA,QAAAD,EAAAU,EAAAE,EAAA,IAAAb,EAAAqD,QAAAvB,GAAAyB,MAAA,SAAAtD,GAAAoB,EAAAJ,MAAAhB,EAAAU,EAAAU,EAAA,aAAApB,GAAA,OAAAC,EAAA,QAAAD,EAAAU,EAAAE,EAAA,IAAAA,EAAAE,EAAAY,IAAA,KAAApB,EAAAQ,EAAA,yBAAAd,EAAAI,GAAA,SAAAI,IAAA,WAAAT,GAAA,SAAAA,EAAAO,GAAAL,EAAAD,EAAAI,EAAAL,EAAAO,EAAA,WAAAA,EAAAA,EAAAA,EAAAgD,KAAA9C,EAAAA,GAAAA,GAAA,gBAAAoB,EAAA7B,EAAAE,GAAA,IAAAG,EAAAH,EAAAwB,OAAAnB,EAAAP,EAAAS,EAAAJ,GAAA,GAAAE,IAAAN,EAAA,OAAAC,EAAA0B,SAAA,eAAAvB,GAAAL,EAAAS,EAAA+C,SAAAtD,EAAAwB,OAAA,SAAAxB,EAAAyB,IAAA1B,EAAA4B,EAAA7B,EAAAE,GAAA,UAAAA,EAAAwB,SAAA,WAAArB,IAAAH,EAAAwB,OAAA,QAAAxB,EAAAyB,IAAA,IAAA8B,UAAA,oCAAApD,EAAA,aAAAyB,EAAA,IAAArB,EAAA0B,EAAA5B,EAAAP,EAAAS,EAAAP,EAAAyB,KAAA,aAAAlB,EAAA2B,KAAA,OAAAlC,EAAAwB,OAAA,QAAAxB,EAAAyB,IAAAlB,EAAAkB,IAAAzB,EAAA0B,SAAA,KAAAE,EAAA,IAAAnB,EAAAF,EAAAkB,IAAA,OAAAhB,EAAAA,EAAAc,MAAAvB,EAAAF,EAAAA,GAAAW,EAAAM,MAAAf,EAAAwD,KAAA1D,EAAAK,EAAA,WAAAH,EAAAwB,SAAAxB,EAAAwB,OAAA,OAAAxB,EAAAyB,IAAA1B,GAAAC,EAAA0B,SAAA,KAAAE,GAAAnB,GAAAT,EAAAwB,OAAA,QAAAxB,EAAAyB,IAAA,IAAA8B,UAAA,oCAAAvD,EAAA0B,SAAA,KAAAE,EAAA,UAAA6B,EAAA1D,GAAA,KAAA2D,WAAAC,KAAA5D,EAAA,UAAA6D,EAAA9D,GAAA,IAAAE,EAAAF,EAAA,OAAAE,EAAAkC,KAAA,SAAAlC,EAAAyB,IAAA1B,EAAAD,EAAA,GAAAE,CAAA,UAAAmC,EAAApC,GAAA,KAAA2D,WAAA,OAAA3D,EAAAgD,QAAAU,EAAA,WAAAI,OAAA,YAAAjB,EAAA9C,GAAA,SAAAA,EAAA,KAAAE,EAAAF,EAAAS,GAAA,GAAAP,EAAA,OAAAA,EAAAoC,KAAAtC,GAAA,sBAAAA,EAAA0D,KAAA,OAAA1D,EAAA,IAAAgE,MAAAhE,EAAAiE,QAAA,KAAA1D,GAAA,EAAAI,EAAA,SAAAT,IAAA,OAAAK,EAAAP,EAAAiE,QAAA,GAAA5D,EAAAiC,KAAAtC,EAAAO,GAAA,OAAAL,EAAAe,MAAAjB,EAAAO,GAAAL,EAAAuB,MAAA,EAAAvB,EAAA,OAAAA,EAAAe,MAAAhB,EAAAC,EAAAuB,MAAA,EAAAvB,CAAA,SAAAS,EAAA+C,KAAA/C,CAAA,YAAA8C,UAAAL,EAAApD,GAAA,2BAAAwC,EAAApC,UAAAqC,EAAA1B,EAAAgC,EAAA,cAAAN,GAAA1B,EAAA0B,EAAA,cAAAD,GAAAA,EAAA0B,YAAAnD,EAAA0B,EAAA5B,EAAA,qBAAAb,EAAAmE,oBAAA,SAAAlE,GAAA,IAAAD,EAAA,mBAAAC,GAAAA,EAAAmE,YAAA,QAAApE,IAAAA,IAAAwC,GAAA,uBAAAxC,EAAAkE,aAAAlE,EAAAqE,MAAA,EAAArE,EAAAsE,KAAA,SAAArE,GAAA,OAAAE,OAAAoE,eAAApE,OAAAoE,eAAAtE,EAAAwC,IAAAxC,EAAAuE,UAAA/B,EAAA1B,EAAAd,EAAAY,EAAA,sBAAAZ,EAAAG,UAAAD,OAAAoB,OAAAwB,GAAA9C,CAAA,EAAAD,EAAAyE,MAAA,SAAAxE,GAAA,OAAAqD,QAAArD,EAAA,EAAA+C,EAAAG,EAAA/C,WAAAW,EAAAoC,EAAA/C,UAAAO,GAAA,0BAAAX,EAAAmD,cAAAA,EAAAnD,EAAA0E,MAAA,SAAAzE,EAAAC,EAAAG,EAAAE,EAAAE,QAAA,IAAAA,IAAAA,EAAAkE,GAAA,IAAAhE,EAAA,IAAAwC,EAAA9B,EAAApB,EAAAC,EAAAG,EAAAE,GAAAE,GAAA,OAAAT,EAAAmE,oBAAAjE,GAAAS,EAAAA,EAAA+C,OAAAH,MAAA,SAAAtD,GAAA,OAAAA,EAAAwB,KAAAxB,EAAAgB,MAAAN,EAAA+C,MAAA,KAAAV,EAAAD,GAAAhC,EAAAgC,EAAAlC,EAAA,aAAAE,EAAAgC,EAAAtC,GAAA,0BAAAM,EAAAgC,EAAA,qDAAA/C,EAAA4E,KAAA,SAAA3E,GAAA,IAAAD,EAAAG,OAAAF,GAAAC,EAAA,WAAAG,KAAAL,EAAAE,EAAA2E,QAAAxE,GAAA,gBAAAJ,IAAA,KAAAC,EAAA+D,QAAA,IAAA5D,EAAAH,EAAA4E,SAAA9E,EAAA,OAAAC,EAAAgB,MAAAZ,EAAAJ,EAAAwB,MAAA,EAAAxB,EAAA,OAAAA,EAAAwB,MAAA,EAAAxB,CAAA,GAAAD,EAAA+E,OAAAjC,EAAAT,EAAAjC,UAAA,CAAAgE,YAAA/B,EAAA0B,MAAA,SAAA/D,GAAA,QAAAgF,KAAA,KAAAtB,KAAA,OAAA3B,KAAA,KAAAC,MAAA/B,EAAA,KAAAwB,MAAA,OAAAG,SAAA,UAAAF,OAAA,YAAAC,IAAA1B,EAAA,KAAA2D,WAAAX,QAAAa,IAAA9D,EAAA,QAAAE,KAAA,WAAAA,EAAA+E,OAAA,IAAA5E,EAAAiC,KAAA,KAAApC,KAAA8D,OAAA9D,EAAAgF,MAAA,WAAAhF,GAAAD,EAAA,EAAAkF,KAAA,gBAAA1D,MAAA,MAAAxB,EAAA,KAAA2D,WAAA,mBAAA3D,EAAAmC,KAAA,MAAAnC,EAAA0B,IAAA,YAAAyD,IAAA,EAAAnD,kBAAA,SAAAjC,GAAA,QAAAyB,KAAA,MAAAzB,EAAA,IAAAE,EAAA,cAAAG,EAAAJ,GAAAU,EAAAyB,KAAA,QAAAzB,EAAAgB,IAAA3B,EAAAE,EAAAwD,KAAAzD,CAAA,SAAAM,EAAAL,EAAA0D,WAAAK,OAAA,EAAA1D,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAAmD,WAAArD,GAAAI,EAAAF,EAAA,GAAAI,EAAA,KAAAmE,KAAAjE,EAAAN,EAAA,GAAAY,EAAAZ,EAAA,WAAAA,EAAA,UAAAJ,EAAA,cAAAU,IAAAM,EAAA,MAAAG,MAAA,mDAAAf,EAAA,IAAAA,EAAA,IAAAI,EAAA,IAAAA,EAAAE,EAAA,YAAAW,OAAA,YAAAC,IAAA1B,EAAAI,EAAAU,IAAA,KAAAF,EAAAQ,EAAA,OAAAhB,EAAAgB,IAAA,KAAAa,OAAA,SAAAjC,EAAAD,GAAA,QAAAE,EAAA,KAAA0D,WAAAK,OAAA,EAAA/D,GAAA,IAAAA,EAAA,KAAAG,EAAA,KAAAuD,WAAA1D,GAAA,GAAAG,EAAA,OAAAA,EAAA,SAAA2E,MAAA,KAAAA,KAAA3E,EAAA,QAAAE,EAAAF,EAAA,OAAAE,IAAA,UAAAN,GAAA,aAAAA,IAAAM,EAAA,IAAAP,GAAAA,GAAAO,EAAA,KAAAA,EAAA,UAAAE,EAAAF,EAAAA,EAAA,aAAAE,EAAA2B,KAAAnC,EAAAQ,EAAAkB,IAAA3B,EAAAO,GAAA,KAAAmB,OAAA,YAAAgC,KAAAnD,EAAA,GAAAuB,GAAA,KAAAuD,SAAA5E,EAAA,EAAA4E,SAAA,SAAApF,EAAAD,GAAA,aAAAC,EAAAmC,KAAA,MAAAnC,EAAA0B,IAAA,gBAAA1B,EAAAmC,MAAA,aAAAnC,EAAAmC,KAAA,KAAAsB,KAAAzD,EAAA0B,IAAA,WAAA1B,EAAAmC,MAAA,KAAAgD,KAAA,KAAAzD,IAAA1B,EAAA0B,IAAA,KAAAD,OAAA,cAAAgC,KAAA,kBAAAzD,EAAAmC,MAAApC,IAAA,KAAA0D,KAAA1D,GAAA8B,CAAA,EAAAwD,OAAA,SAAArF,GAAA,QAAAD,EAAA,KAAA4D,WAAAK,OAAA,EAAAjE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAA0D,WAAA5D,GAAA,GAAAE,EAAA,KAAAD,EAAA,YAAAoF,SAAAnF,EAAA,GAAAA,EAAA,IAAA4D,EAAA5D,GAAA4B,CAAA,GAAAyD,MAAA,SAAAtF,GAAA,QAAAD,EAAA,KAAA4D,WAAAK,OAAA,EAAAjE,GAAA,IAAAA,EAAA,KAAAE,EAAA,KAAA0D,WAAA5D,GAAA,GAAAE,EAAA,KAAAD,EAAA,KAAAI,EAAAH,EAAA,gBAAAG,EAAA+B,KAAA,KAAA7B,EAAAF,EAAAsB,IAAAmC,EAAA5D,EAAA,QAAAK,CAAA,QAAAiB,MAAA,0BAAAgE,cAAA,SAAAxF,EAAAE,EAAAG,GAAA,YAAAuB,SAAA,CAAAnB,EAAAqC,EAAA9C,GAAAA,EAAAE,EAAAG,EAAAA,GAAA,cAAAqB,SAAA,KAAAC,IAAA1B,GAAA6B,CAAA,GAAA9B,CAAA,UAAAyF,EAAApF,EAAAJ,EAAAC,EAAAF,EAAAO,EAAAI,EAAAI,GAAA,QAAAN,EAAAJ,EAAAM,GAAAI,GAAAF,EAAAJ,EAAAQ,KAAA,OAAAZ,GAAA,YAAAH,EAAAG,EAAA,CAAAI,EAAAgB,KAAAxB,EAAAY,GAAA8D,EAAAtB,QAAAxC,GAAA0C,KAAAvD,EAAAO,EAAA,KAKMmF,EAAY,SAACC,GAAwB,IAAlBC,EAAMC,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAAG,IAChC,OAAKF,EACEA,EAAK1B,OAAS2B,EAASD,EAAKT,MAAM,EAAGU,GAAU,MAAQD,EAD5C,EAEpB,EAGMI,EAAgB,IAAIC,IAGtBC,EAAiB,KAGfC,EAAQ,SAACC,GAAE,OAAK,IAAIxB,GAAQ,SAAAtB,GAAO,OAAI+C,WAAW/C,EAAS8C,EAAG,GAAC,EAG/DE,EAAmB,SAACC,GACxB,IAAKA,EAAO,OAAO,EAEnB,IAaMC,GAAgBD,EAAME,SAAWF,EAAMG,YAAc,IAAIC,cAC/D,MAd0B,CACxB,aACA,aACA,iBACA,sBACA,iBACA,UACA,gBACA,aACA,eACA,KAIuBC,MAAK,SAAAC,GAAG,OAAIL,EAAaM,SAASD,EAAI,GACjE,EAGME,EAAgB,SAACC,GAAoD,IAA5CC,EAAQnB,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAAG,aAAcoB,EAASpB,UAAA5B,OAAA,QAAA6B,IAAAD,UAAA,GAAAA,UAAA,GAAG,CAAC,EAGtCqB,GAKzBD,EALFE,uBAKEF,EAJFG,MAAAA,OAAI,IAAAF,EAAG,SAAQA,EAAAG,EAIbJ,EAHFK,YAAAA,OAAW,IAAAD,EAAG,0BAAyBA,EAAAE,EAGrCN,EAFFO,YAAaC,OAAc,IAAAF,EAAG,KAAIA,EAAAG,EAEhCT,EADFU,aAAcC,OAAe,IAAAF,EAAG,KAAIA,EAShCG,EAAcnC,EAAUqB,EAAOe,QAAQ,mOAAoO,IAAIC,QAGrR,GAAiB,eAAbf,EAA2B,CAG7B,IAAMgB,EAAmBjB,EAAOkB,MAAM,2CAGtC,MAAO,CACLC,YAAa,aACbV,YAAa9B,EAAUsC,EAAmBA,EAAiB,GAAGD,OAA4B,MAAlBN,EAAyBA,EAAiBI,GAElHT,KAAMA,EACNE,YAA6B,0BAAhBA,EAA0C,wBAA0B,0BAErF,CAGA,MAAiB,kBAAbN,EACK,CACLkB,YAAa,gBACbP,aAAcjC,EAA6B,MAAnBkC,EAA0BA,EAAkBC,GAEpET,KAAAA,EACAE,YAA6B,0BAAhBA,EAA0C,wBAA0B,2BAKpE,SAAbN,EACK,CACLkB,YAAa,aACbV,YAAa9B,EAAUmC,GAEvBT,KAAAA,EACAE,YAA6B,0BAAhBA,EAA0C,wBAA0B,2BAK9E,CACLY,YAAa,aACbV,YAAa9B,EAA4B,MAAlB+B,EAAyBA,EAAiBI,GAEjET,KAAAA,EACAE,YAA6B,0BAAhBA,EAA0C,wBAA0B,0BAErF,EAEO,SAAea,EAAiBC,GAAA,OAAAC,EAAAC,MAAC,KAADzC,UAAA,CAiLtC,SAAAwC,IA5RD,IAAAhI,EA4RC,OA5RDA,EA4RCN,IAAAuE,MAjLM,SAAAiE,EAAiCxB,GAAM,IAAAyB,EAAAvB,EAAAwB,EAAAP,EAAAQ,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA3D,UAAA,OAAA9F,IAAAwC,MAAA,SAAAkH,GAAA,cAAAA,EAAAzE,KAAAyE,EAAA/F,MAAA,OA6BwC,GA7BtC8E,EAAUgB,EAAAvF,OAAA,QAAA6B,IAAA0D,EAAA,GAAAA,EAAA,GAAG,EAC3Df,GAD8DxB,EAASuC,EAAAvF,OAAA,QAAA6B,IAAA0D,EAAA,GAAAA,EAAA,GAAG,CAAC,GAGzEtB,YAAAA,OAAW,IAAAO,EAAG,aAAYA,EAUxBxB,EATFO,YASEP,EARFU,aAQEV,EAPFE,uBAOEF,EANFG,KAMEH,EALFK,YAAuCoB,EAKrCzB,EAJF0B,UAAAA,OAAS,IAAAD,EAAG,KAAIA,EAAAE,EAId3B,EAHF4B,UAAAA,OAAS,IAAAD,GAAQA,EAAAE,EAGf7B,EAFF8B,iBAAAA,OAAgB,IAAAD,EAAG,QAAOA,EAAAE,EAExB/B,EADFgC,cAAAA,OAAa,IAAAD,GAAQA,EAIjBE,EAAUpC,EAAcpB,EAAUqB,GAASmB,EAAajB,GAExDkC,EAAc,CAClBO,KAAM,CACJR,QAASA,GAEXP,UAAAA,EACAE,UAAAA,EACAE,iBAAAA,EACAE,cAAAA,GAIIG,EAAWO,KAAKC,UAAU,CAAEV,QAAAA,EAASP,UAAAA,EAAWE,UAAAA,EAAWE,iBAAAA,KAC7DhD,EAAc8D,IAAIT,GAAW,CAAFK,EAAA/F,KAAA,QACoD,OAAA+F,EAAAvH,OAAA,SAC1E6D,EAAc+D,IAAIV,IAAS,OAYnCC,EAAAtJ,IAAAuE,MAAA,SAAA+E,IAAA,IAAAU,EAAAC,EAAAC,EAAAP,EAAAQ,EAAAC,EAAA5D,EAAA6D,EAAAC,EAAAC,EAAAC,EAAA,OAAAxK,IAAAwC,MAAA,SAAAiI,GAAA,cAAAA,EAAAxF,KAAAwF,EAAA9G,MAAA,OAUG,GAVH8G,EAAAxF,KAAA,EAUOiB,EACF,IAAMA,EAAewE,OAAS,CAAE,MAAOC,GAAI,CAIgB,OAFvDX,EAAa,IAAIY,gBACvB1E,EAAiB8D,EACXC,EAAY5D,YAAW,kBAAM2D,EAAWU,OAAO,GAAE,MAAMD,EAAA9G,KAAA,EAEtCkH,MAvKH,8EAuK4B,CAC9ClJ,OAAQ,OACRmJ,QAAS,CACP,eAAgB,mBAChB,YA5KgB,oCA8KlBC,KAAMnB,KAAKC,UAAUT,GACrB4B,OAAQhB,EAAWgB,SACnB,OACsB,GATlBd,EAAQO,EAAAzI,KASdiJ,aAAahB,GAERC,EAASgB,GAAI,CAAFT,EAAA9G,KAAA,eACR,IAAIlC,MAAM,QAAD0J,OAASjB,EAASkB,OAAM,MAAAD,OAAKjB,EAASmB,aAAa,eAAAZ,EAAA9G,KAAA,GAGjDuG,EAASoB,OAAM,QAKlC,MALM3B,EAAIc,EAAAzI,OAMkB,YAAhB2H,EAAKyB,QAAwBzB,EAAKA,MAAQA,EAAKA,KAAK4B,SAAO,CAAAd,EAAA9G,KAAA,SACtB,OAA/CqC,EAAcwF,IAAInC,EAAUM,EAAKA,KAAK4B,SAASd,EAAAtI,OAAA,UAAAa,EACxC2G,EAAKA,KAAK4B,UAAO,YAItB5B,KAASA,EAAKQ,QAAUR,EAAKO,UAAYP,EAAK8B,QAAU9B,EAAK4B,SAAQ,CAAAd,EAAA9G,KAAA,SAG/B,OAFlCwG,EAASR,EAAKQ,QAAUR,EAAKO,UAAYP,EAAK8B,QAAU9B,EAAK4B,QAC7DnB,EAA+B,iBAAXD,EAAsBA,EAASP,KAAKC,UAAUM,GACxEnE,EAAcwF,IAAInC,EAAUe,GAAYK,EAAAtI,OAAA,UAAAa,EACjCoH,IAAU,YAIfT,IAAQA,EAAKlD,QAAO,CAAAgE,EAAA9G,KAAA,SACoB,OAA1CqC,EAAcwF,IAAInC,EAAUM,EAAKlD,SAASgE,EAAAtI,OAAA,UAAAa,EACnC2G,EAAKlD,UAAO,WAID,iBAATkD,EAAiB,CAAAc,EAAA9G,KAAA,SACQ,OAAlCqC,EAAcwF,IAAInC,EAAUM,GAAMc,EAAAtI,OAAA,UAAAa,EAC3B2G,IAAI,YAITA,GAAwB,YAAhBA,EAAKyB,OAAoB,CAAAX,EAAA9G,KAAA,SAMnC,GALM6C,EAAemD,EAAKlD,SAAWkD,EAAKyB,QAAU,kBAMhD9E,EAAiB,CAAEG,QAASD,KAAmBgD,EAAUf,GAAU,CAAAgC,EAAA9G,KAAA,SAIpE,OAHK0G,EAA0C,IAA3BqB,KAAKC,IAAI,EAAGnC,EAAU,GAA4B,IAAhBkC,KAAKE,SAG3DnB,EAAA9G,KAAA,GACKwC,EAAMkE,GAAa,QAqBA,QAyBF,eAAAI,EAAAtI,OAAA,YA9CE,eAAAsI,EAAAtI,OAAA,UAAAa,EAAA,cAAAmI,OAKN3E,GAAY2E,OAAG3B,EAAU,EAAI,WAAH2B,OAAc3B,EAAO,cAAe,MAAE,YAInFG,IAAQA,EAAKpD,MAAK,CAAAkE,EAAA9G,KAAA,SAMpB,GALM6C,EAAemD,EAAKpD,MAAME,SAAWkD,EAAKpD,MAAMG,YAAckD,KAAKC,UAAUF,EAAKpD,SAMpFD,EAAiBqD,EAAKpD,QAAUiD,EAAUf,GAAU,CAAAgC,EAAA9G,KAAA,SAIrD,OAHK0G,EAA0C,IAA3BqB,KAAKC,IAAI,EAAGnC,EAAU,GAA4B,IAAhBkC,KAAKE,SAG3DnB,EAAA9G,KAAA,GACKwC,EAAMkE,GAAa,eAAAI,EAAAtI,OAAA,UAAAa,EAAA,cAAAmI,OAKN3E,GAAY2E,OAAG3B,EAAU,EAAI,WAAH2B,OAAc3B,EAAO,cAAe,MAAE,QAMtF,OAAAiB,EAAAtI,OAAA,UAAAa,EACM,0DAA4D4G,KAAKC,UAAUF,KAAK,QAOvF,GAPuFc,EAAAxF,KAAA,GAAAwF,EAAAoB,GAAApB,EAAA,WAQnFjB,EAAUf,IAAegC,EAAAoB,GAAEpF,QAAQK,SAAS,UAAY2D,EAAAoB,GAAEpF,QAAQK,SAAS,YAAc2D,EAAAoB,GAAEpF,QAAQK,SAAS,aAAW,CAAA2D,EAAA9G,KAAA,SAIxH,OAHK0G,EAA0C,IAA3BqB,KAAKC,IAAI,EAAGnC,EAAU,GAA4B,IAAhBkC,KAAKE,SAG3DnB,EAAA9G,KAAA,GACKwC,EAAMkE,GAAa,eAAAI,EAAAtI,OAAA,UAAAa,EAAA,gCAAAmI,OAKYV,EAAAoB,GAAEpF,QAAO,YAAA0E,OAAW3B,EAAO,yCAAAiB,EAAArF,OAAA,GAAAkE,EAAA,kBA7H7DE,EAAU,EAAC,aAAEA,GAAWf,GAAU,CAAAiB,EAAA/F,KAAA,gBAAA+F,EAAAjE,cAAA6D,IAAA,yBAAAC,EAAAG,EAAAmC,IAAA,CAAAnC,EAAA/F,KAAA,gBAAA+F,EAAAvH,OAAA,2BAAAoH,EAAA,CAAAG,EAAA/F,KAAA,gBAAA+F,EAAAvH,OAAA,SAAAoH,EAAAvG,GAAA,QAAEwG,IAASE,EAAA/F,KAAA,wBAAA+F,EAAAvH,OAAA,SAkI/C,2DAAyD,yBAAAuH,EAAAtE,OAAA,GAAAoD,EAAA,IACjEF,EA5RD,eAAApI,EAAA,KAAAC,EAAA2F,UAAA,WAAAlB,GAAA,SAAA3E,EAAAO,GAAA,IAAAI,EAAAN,EAAAiI,MAAArI,EAAAC,GAAA,SAAA2L,EAAAxL,GAAAoF,EAAA9E,EAAAX,EAAAO,EAAAsL,EAAAC,EAAA,OAAAzL,EAAA,UAAAyL,EAAAzL,GAAAoF,EAAA9E,EAAAX,EAAAO,EAAAsL,EAAAC,EAAA,QAAAzL,EAAA,CAAAwL,OAAA,OA4RCxD,EAAAC,MAAA,KAAAzC,UAAA","sources":["webpack://outlook-plugin/./src/taskpane/botAtWorkApi.js"],"sourcesContent":["// BotAtWork API utility for email generation and suggestions\nconst BOTATWORK_API_KEY = \"e80f5458c550f5b85ef56175b789468a\";\nconst BOTATWORK_API_URL = \"https://api.botatwork.com/trigger-task/b6f44edd-8140-4084-881e-2c11c403c082\";\nconst DEBUG_LOGS_ENABLED = false; // Toggle verbose logs\n\n// Normalize and clamp prompt length to reduce payload and latency\nconst clampText = (text, maxLen = 4000) => {\n  if (!text) return \"\";\n  return text.length > maxLen ? text.slice(0, maxLen) + \"...\" : text;\n};\n\n// Simple in-memory cache to avoid duplicate roundtrips during a session\nconst responseCache = new Map();\n\n// Track last in-flight request to cancel when a new one starts\nlet lastController = null;\n\n// Helper function to add delay\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Helper function to check if error is retryable\nconst isRetryableError = (error) => {\n  if (!error) return false;\n  \n  const retryableMessages = [\n    'overloaded',\n    'rate limit',\n    'quota exceeded',\n    'service unavailable',\n    'internal error',\n    'timeout',\n    'network error',\n    'connection',\n    'server error',\n    '5'  // HTTP 5xx errors\n  ];\n  \n  const errorMessage = (error.message || error.toString() || '').toLowerCase();\n  return retryableMessages.some(msg => errorMessage.includes(msg));\n};\n\n// Helper function to determine task type and format payload\nconst formatPayload = (prompt, taskType = 'emailWrite', apiParams = {}) => {\n  // Extract dynamic parameters with defaults\n  const {\n    additionalInstructions = \"\",\n    tone = \"formal\",\n    pointOfView = \"organizationPerspective\",\n    description: apiDescription = null,\n    emailContent: apiEmailContent = null\n  } = apiParams;\n\n  if (DEBUG_LOGS_ENABLED) {\n    console.log('BotAtWork API - formatPayload received apiParams:', apiParams);\n    console.log('BotAtWork API - Extracted parameters:', { tone, pointOfView, additionalInstructions });\n  }\n\n  // Clean and structure the prompt for better API understanding\n  const cleanPrompt = clampText(prompt.replace(/^(Write a professional email with the following details:|Suggest a professional reply to this email considering the specified tone and point of view:|Please provide a helpful response to this follow-up question or request:)/i, '').trim());\n\n  // For email writing tasks (new emails)\n  if (taskType === 'emailWrite') {\n    // Extract description from the prompt, but use dynamic tone and pointOfView\n    // Updated regex to capture multi-line descriptions by using [\\s\\S]*? (non-greedy match of any character including newlines)\n    const descriptionMatch = prompt.match(/Description:\\s*([\\s\\S]*?)(?=\\nTone:|$)/i);\n    \n    // Always use the dynamic parameters for tone and pointOfView, not extracted from prompt\n    return {\n      chooseATask: \"emailWrite\",\n      description: clampText(descriptionMatch ? descriptionMatch[1].trim() : (apiDescription != null ? apiDescription : cleanPrompt)),\n      //additionalInstructions: additionalInstructions || \"Write a professional email that matches the specified tone and perspective exactly. Use 'we', 'our', 'us' for organization perspective and 'I', 'my', 'me' for individual perspective.\",\n      tone: tone, // Always use the dynamic tone parameter\n      pointOfView: pointOfView === \"individualPerspective\" ? \"individualPerspective\" : \"organizationPerspective\" // Map to API expected values\n    };\n  }\n\n  // For email response tasks (replies, suggestions, enhancements)\n  if (taskType === 'emailResponse') {\n    return {\n      chooseATask: \"emailResponse\",\n      emailContent: clampText(apiEmailContent != null ? apiEmailContent : cleanPrompt),\n     // additionalInstructions: additionalInstructions || \"Provide a relevant and contextual response that matches the specified tone and perspective. Use 'we', 'our', 'us' for organization perspective and 'I', 'my', 'me' for individual perspective.\",\n      tone,\n      pointOfView: pointOfView === \"individualPerspective\" ? \"individualPerspective\" : \"organizationPerspective\"\n    };\n  }\n\n  // For chat/conversation tasks\n  if (taskType === 'chat') {\n    return {\n      chooseATask: \"emailWrite\", // Use emailWrite for chat as it's more flexible\n      description: clampText(cleanPrompt),\n     // additionalInstructions: additionalInstructions || \"Provide a helpful and conversational response. Use 'we', 'our', 'us' for organization perspective and 'I', 'my', 'me' for individual perspective.\",\n      tone,\n      pointOfView: pointOfView === \"individualPerspective\" ? \"individualPerspective\" : \"organizationPerspective\"\n    };\n  }\n\n  // Default fallback\n  return {\n    chooseATask: \"emailWrite\",\n    description: clampText(apiDescription != null ? apiDescription : cleanPrompt),\n   // additionalInstructions: additionalInstructions || \"Write a professional email that matches the specified tone and perspective. Use 'we', 'our', 'us' for organization perspective and 'I', 'my', 'me' for individual perspective.\",\n    tone,\n    pointOfView: pointOfView === \"individualPerspective\" ? \"individualPerspective\" : \"organizationPerspective\"\n  };\n};\n\nexport async function getSuggestedReply(prompt, maxRetries = 2, apiParams = {}) {\n  // Extract dynamic parameters with defaults\n  const {\n    chooseATask = \"emailWrite\",\n    description = prompt,\n    emailContent = prompt, // For emailResponse tasks\n    additionalInstructions = \"\",\n    tone = \"formal\",\n    pointOfView = \"organizationPerspective\",\n    anonymize = null,\n    incognito = false,\n    default_language = \"en-US\",\n    should_stream = false\n  } = apiParams;\n\n  // Create payload based on task type using formatPayload\n  const payload = formatPayload(clampText(prompt), chooseATask, apiParams);\n  \n  const requestBody = {\n    data: {\n      payload: payload\n    },\n    anonymize,\n    incognito,\n    default_language,\n    should_stream\n  };\n\n  // Return cached response if available\n  const cacheKey = JSON.stringify({ payload, anonymize, incognito, default_language });\n  if (responseCache.has(cacheKey)) {\n    if (DEBUG_LOGS_ENABLED) console.log('BotAtWork API - returning cached response');\n    return responseCache.get(cacheKey);\n  }\n\n  if (DEBUG_LOGS_ENABLED) {\n    console.log('BotAtWork API - Using dynamic parameters:', {\n      chooseATask,\n      tone,\n      pointOfView,\n      additionalInstructions,\n      default_language\n    });\n    console.log('BotAtWork API - Final payload being sent:', JSON.stringify(payload, null, 2));\n  }\n\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\n    try {\n      if (DEBUG_LOGS_ENABLED) {\n        console.log(`BotAtWork API attempt ${attempt}/${maxRetries}`);\n        console.log(\"Request payload:\", JSON.stringify(requestBody, null, 2));\n      }\n\n      // Cancel any previous in-flight request\n      if (lastController) {\n        try { lastController.abort(); } catch (_) {}\n      }\n      const controller = new AbortController();\n      lastController = controller;\n      const timeoutId = setTimeout(() => controller.abort(), 15000);\n\n      const response = await fetch(BOTATWORK_API_URL, {\n        method: \"POST\",\n        headers: { \n          \"Content-Type\": \"application/json\",\n          \"x-api-key\": BOTATWORK_API_KEY\n        },\n        body: JSON.stringify(requestBody),\n        signal: controller.signal\n      });\n      clearTimeout(timeoutId);\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      const data = await response.json();\n      if (DEBUG_LOGS_ENABLED) {\n        console.log(\"BotAtWork API raw response:\", data);\n      }\n      \n      // Check for successful response - BotAtWork API format\n      if (data && data.status === \"SUCCESS\" && data.data && data.data.content) {\n        responseCache.set(cacheKey, data.data.content);\n        return data.data.content;\n      }\n      \n      // Fallback: Check for other possible response formats\n      if (data && (data.result || data.response || data.output || data.content)) {\n        const result = data.result || data.response || data.output || data.content;\n        const normalized = typeof result === 'string' ? result : JSON.stringify(result);\n        responseCache.set(cacheKey, normalized);\n        return normalized;\n      }\n      \n      // If data has a message field, use that\n      if (data && data.message) {\n        responseCache.set(cacheKey, data.message);\n        return data.message;\n      }\n      \n      // If data is a string, return it directly\n      if (typeof data === 'string') {\n        responseCache.set(cacheKey, data);\n        return data;\n      }\n      \n      // Check for API errors - BotAtWork API format\n      if (data && data.status !== \"SUCCESS\") {\n        const errorMessage = data.message || data.status || \"Unknown error\";\n        if (DEBUG_LOGS_ENABLED) {\n          console.log(`BotAtWork API error on attempt ${attempt}:`, errorMessage);\n        }\n        \n        // Check if this is a retryable error\n        if (isRetryableError({ message: errorMessage }) && attempt < maxRetries) {\n          const backoffDelay = Math.pow(2, attempt - 1) * 1000 + Math.random() * 1000; // Exponential backoff with jitter\n          if (DEBUG_LOGS_ENABLED) {\n            console.log(`Retrying in ${Math.round(backoffDelay)}ms...`);\n          }\n          await delay(backoffDelay);\n          continue;\n        }\n        \n        // If not retryable or max retries reached, return error\n        return `API error: ${errorMessage}${attempt > 1 ? ` (after ${attempt} attempts)` : ''}`;\n      }\n      \n      // Check for generic API errors\n      if (data && data.error) {\n        const errorMessage = data.error.message || data.error.toString() || JSON.stringify(data.error);\n        if (DEBUG_LOGS_ENABLED) {\n          console.log(`BotAtWork API error on attempt ${attempt}:`, errorMessage);\n        }\n        \n        // Check if this is a retryable error\n        if (isRetryableError(data.error) && attempt < maxRetries) {\n          const backoffDelay = Math.pow(2, attempt - 1) * 1000 + Math.random() * 1000; // Exponential backoff with jitter\n          if (DEBUG_LOGS_ENABLED) {\n            console.log(`Retrying in ${Math.round(backoffDelay)}ms...`);\n          }\n          await delay(backoffDelay);\n          continue;\n        }\n        \n        // If not retryable or max retries reached, return error\n        return `API error: ${errorMessage}${attempt > 1 ? ` (after ${attempt} attempts)` : ''}`;\n      }\n      \n      // If we get here, we have data but couldn't parse it\n      if (DEBUG_LOGS_ENABLED) {\n        console.log(\"Unexpected response format:\", data);\n      }\n      return \"Response received but format unexpected. Raw response: \" + JSON.stringify(data);\n      \n    } catch (e) {\n      if (DEBUG_LOGS_ENABLED) {\n        console.log(`Network error on attempt ${attempt}:`, e.message);\n      }\n      \n      // Check if this is a retryable network error\n      if (attempt < maxRetries && (e.message.includes('fetch') || e.message.includes('network') || e.message.includes('timeout'))) {\n        const backoffDelay = Math.pow(2, attempt - 1) * 1000 + Math.random() * 1000;\n        if (DEBUG_LOGS_ENABLED) {\n          console.log(`Retrying in ${Math.round(backoffDelay)}ms...`);\n        }\n        await delay(backoffDelay);\n        continue;\n      }\n      \n      // Max retries reached or non-retryable error\n      return `Error calling BotAtWork API: ${e.message} (after ${attempt} attempts)`;\n    }\n  }\n  \n  // This should never be reached, but just in case\n  return \"Maximum retry attempts reached. Please try again later.\";\n}\n"],"names":["_regeneratorRuntime","r","t","e","Object","prototype","n","hasOwnProperty","o","Symbol","i","iterator","a","asyncIterator","u","toStringTag","c","defineProperty","value","enumerable","configurable","writable","h","Generator","create","Error","done","method","arg","delegate","d","f","sent","_sent","dispatchException","abrupt","s","type","Context","call","wrap","GeneratorFunction","GeneratorFunctionPrototype","l","p","getPrototypeOf","y","x","v","g","forEach","_invoke","AsyncIterator","_typeof","resolve","__await","then","return","TypeError","next","w","tryEntries","push","m","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","unshift","pop","values","prev","charAt","slice","stop","rval","complete","finish","catch","delegateYield","asyncGeneratorStep","clampText","text","maxLen","arguments","undefined","responseCache","Map","lastController","delay","ms","setTimeout","isRetryableError","error","errorMessage","message","toString","toLowerCase","some","msg","includes","formatPayload","prompt","taskType","apiParams","_apiParams$tone","additionalInstructions","tone","_apiParams$pointOfVie","pointOfView","_apiParams$descriptio","description","apiDescription","_apiParams$emailConte","emailContent","apiEmailContent","cleanPrompt","replace","trim","descriptionMatch","match","chooseATask","getSuggestedReply","_x","_getSuggestedReply","apply","_callee","maxRetries","_apiParams$chooseATas","_apiParams$anonymize","anonymize","_apiParams$incognito","incognito","_apiParams$default_la","default_language","_apiParams$should_str","should_stream","payload","requestBody","cacheKey","_loop","_ret","attempt","_args2","_context2","data","JSON","stringify","has","get","controller","timeoutId","response","result","normalized","backoffDelay","_errorMessage","_backoffDelay","_backoffDelay2","_context","abort","_","AbortController","fetch","headers","body","signal","clearTimeout","ok","concat","status","statusText","json","content","set","output","Math","pow","random","t0","_next","_throw"],"sourceRoot":""}