{"version":3,"file":"186.js","mappings":"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","sources":["webpack://office-addin-taskpane-react-js/./src/taskpane/botAtWorkApi.js"],"sourcesContent":["// BotAtWork API utility for email generation and suggestions\r\nconst BOTATWORK_API_KEY = \"e80f5458c550f5b85ef56175b789468a\";\r\nconst BOTATWORK_API_URL = \"https://api.botatwork.com/trigger-task/b6f44edd-8140-4084-881e-2c11c403c082\";\r\n\r\n// Helper function to add delay\r\nconst delay = (ms) => new Promise(resolve => setTimeout(resolve, ms));\r\n\r\n// Helper function to check if error is retryable\r\nconst isRetryableError = (error) => {\r\n  if (!error) return false;\r\n  \r\n  const retryableMessages = [\r\n    'overloaded',\r\n    'rate limit',\r\n    'quota exceeded',\r\n    'service unavailable',\r\n    'internal error',\r\n    'timeout',\r\n    'network error',\r\n    'connection',\r\n    'server error',\r\n    '5'  // HTTP 5xx errors\r\n  ];\r\n  \r\n  const errorMessage = (error.message || error.toString() || '').toLowerCase();\r\n  return retryableMessages.some(msg => errorMessage.includes(msg));\r\n};\r\n\r\n// Helper function to determine task type and format payload\r\nconst formatPayload = (prompt, taskType = 'emailWrite') => {\r\n  // For email writing tasks, try to extract structured data from prompt\r\n  if (taskType === 'emailWrite') {\r\n    // Extract description, tone, and point of view from the prompt\r\n    const descriptionMatch = prompt.match(/Description:\\s*([^\\n]+)/i);\r\n    const toneMatch = prompt.match(/Tone:\\s*([^\\n]+)/i);\r\n    const pointOfViewMatch = prompt.match(/Point of View:\\s*([^\\n]+)/i);\r\n    \r\n    return {\r\n      chooseATask: \"emailWrite\",\r\n      description: descriptionMatch ? descriptionMatch[1].trim() : prompt,\r\n      additionalInstructions: \"\", // Removed as per user request\r\n      tone: toneMatch ? toneMatch[1].trim().toLowerCase() : \"formal\",\r\n      pointOfView: pointOfViewMatch ? pointOfViewMatch[1].trim().replace(/\\s+/g, '').toLowerCase() : \"organizationPerspective\"\r\n    };\r\n  }\r\n  \r\n  // For email response tasks (replies, suggestions), use emailResponse\r\n  if (taskType === 'emailResponse') {\r\n    return {\r\n      chooseATask: \"emailResponse\",\r\n      emailContent: prompt, // Use emailContent for response tasks\r\n      additionalInstructions: \"\",\r\n      tone: \"formal\",\r\n      pointOfView: \"organizationPerspective\"\r\n    };\r\n  }\r\n  \r\n  // For other tasks, use a generic approach\r\n  return {\r\n    chooseATask: \"emailWrite\", // Default task type\r\n    description: prompt,\r\n    additionalInstructions: \"\",\r\n    tone: \"formal\",\r\n    pointOfView: \"organizationPerspective\"\r\n  };\r\n};\r\n\r\nexport async function getSuggestedReply(prompt, maxRetries = 3, apiParams = {}) {\r\n  // Extract dynamic parameters with defaults\r\n  const {\r\n    chooseATask = \"emailWrite\",\r\n    description = prompt,\r\n    emailContent = prompt, // For emailResponse tasks\r\n    additionalInstructions = \"\",\r\n    tone = \"formal\",\r\n    pointOfView = \"organizationPerspective\",\r\n    anonymize = null,\r\n    incognito = false,\r\n    default_language = \"en-US\",\r\n    should_stream = false\r\n  } = apiParams;\r\n\r\n  // Create payload based on task type\r\n  let payload;\r\n  if (chooseATask === \"emailResponse\") {\r\n    payload = {\r\n      chooseATask,\r\n      emailContent,\r\n      additionalInstructions,\r\n      tone,\r\n      pointOfView\r\n    };\r\n  } else {\r\n    // Default payload structure for emailWrite and other tasks\r\n    payload = {\r\n      chooseATask,\r\n      description,\r\n      additionalInstructions,\r\n      tone,\r\n      pointOfView\r\n    };\r\n  }\r\n  \r\n  const requestBody = {\r\n    data: {\r\n      payload: payload\r\n    },\r\n    anonymize,\r\n    incognito,\r\n    default_language,\r\n    should_stream\r\n  };\r\n\r\n  console.log('BotAtWork API - Using dynamic parameters:', {\r\n    chooseATask,\r\n    tone,\r\n    pointOfView,\r\n    additionalInstructions,\r\n    default_language\r\n  });\r\n\r\n  for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n    try {\r\n      console.log(`BotAtWork API attempt ${attempt}/${maxRetries}`);\r\n      console.log(\"Request payload:\", JSON.stringify(requestBody, null, 2));\r\n      \r\n      const response = await fetch(BOTATWORK_API_URL, {\r\n        method: \"POST\",\r\n        headers: { \r\n          \"Content-Type\": \"application/json\",\r\n          \"x-api-key\": BOTATWORK_API_KEY\r\n        },\r\n        body: JSON.stringify(requestBody),\r\n      });\r\n      \r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n      \r\n      const data = await response.json();\r\n      console.log(\"BotAtWork API raw response:\", data);\r\n      \r\n      // Check for successful response - BotAtWork API format\r\n      if (data && data.status === \"SUCCESS\" && data.data && data.data.content) {\r\n        return data.data.content;\r\n      }\r\n      \r\n      // Fallback: Check for other possible response formats\r\n      if (data && (data.result || data.response || data.output || data.content)) {\r\n        const result = data.result || data.response || data.output || data.content;\r\n        return typeof result === 'string' ? result : JSON.stringify(result);\r\n      }\r\n      \r\n      // If data has a message field, use that\r\n      if (data && data.message) {\r\n        return data.message;\r\n      }\r\n      \r\n      // If data is a string, return it directly\r\n      if (typeof data === 'string') {\r\n        return data;\r\n      }\r\n      \r\n      // Check for API errors - BotAtWork API format\r\n      if (data && data.status !== \"SUCCESS\") {\r\n        const errorMessage = data.message || data.status || \"Unknown error\";\r\n        console.log(`BotAtWork API error on attempt ${attempt}:`, errorMessage);\r\n        \r\n        // Check if this is a retryable error\r\n        if (isRetryableError({ message: errorMessage }) && attempt < maxRetries) {\r\n          const backoffDelay = Math.pow(2, attempt - 1) * 1000 + Math.random() * 1000; // Exponential backoff with jitter\r\n          console.log(`Retrying in ${Math.round(backoffDelay)}ms...`);\r\n          await delay(backoffDelay);\r\n          continue;\r\n        }\r\n        \r\n        // If not retryable or max retries reached, return error\r\n        return `API error: ${errorMessage}${attempt > 1 ? ` (after ${attempt} attempts)` : ''}`;\r\n      }\r\n      \r\n      // Check for generic API errors\r\n      if (data && data.error) {\r\n        const errorMessage = data.error.message || data.error.toString() || JSON.stringify(data.error);\r\n        console.log(`BotAtWork API error on attempt ${attempt}:`, errorMessage);\r\n        \r\n        // Check if this is a retryable error\r\n        if (isRetryableError(data.error) && attempt < maxRetries) {\r\n          const backoffDelay = Math.pow(2, attempt - 1) * 1000 + Math.random() * 1000; // Exponential backoff with jitter\r\n          console.log(`Retrying in ${Math.round(backoffDelay)}ms...`);\r\n          await delay(backoffDelay);\r\n          continue;\r\n        }\r\n        \r\n        // If not retryable or max retries reached, return error\r\n        return `API error: ${errorMessage}${attempt > 1 ? ` (after ${attempt} attempts)` : ''}`;\r\n      }\r\n      \r\n      // If we get here, we have data but couldn't parse it\r\n      console.log(\"Unexpected response format:\", data);\r\n      return \"Response received but format unexpected. Raw response: \" + JSON.stringify(data);\r\n      \r\n    } catch (e) {\r\n      console.log(`Network error on attempt ${attempt}:`, e.message);\r\n      \r\n      // Check if this is a retryable network error\r\n      if (attempt < maxRetries && (e.message.includes('fetch') || e.message.includes('network') || e.message.includes('timeout'))) {\r\n        const backoffDelay = Math.pow(2, attempt - 1) * 1000 + Math.random() * 1000;\r\n        console.log(`Retrying in ${Math.round(backoffDelay)}ms...`);\r\n        await delay(backoffDelay);\r\n        continue;\r\n      }\r\n      \r\n      // Max retries reached or non-retryable error\r\n      return `Error calling BotAtWork API: ${e.message} (after ${attempt} attempts)`;\r\n    }\r\n  }\r\n  \r\n  // This should never be reached, but just in case\r\n  return \"Maximum retry attempts reached. Please try again later.\";\r\n}\r\n"],"names":["_regeneratorRuntime","r","t","e","Object","prototype","n","hasOwnProperty","o","Symbol","i","iterator","a","asyncIterator","u","toStringTag","c","defineProperty","value","enumerable","configurable","writable","h","Generator","create","Error","done","method","arg","delegate","d","f","sent","_sent","dispatchException","abrupt","s","type","Context","call","wrap","GeneratorFunction","GeneratorFunctionPrototype","l","p","getPrototypeOf","y","x","v","g","forEach","_invoke","AsyncIterator","_typeof","resolve","__await","then","return","TypeError","next","w","tryEntries","push","m","reset","isNaN","length","displayName","isGeneratorFunction","constructor","name","mark","setPrototypeOf","__proto__","awrap","async","Promise","keys","unshift","pop","values","prev","charAt","slice","stop","rval","complete","finish","catch","delegateYield","asyncGeneratorStep","delay","ms","setTimeout","isRetryableError","error","errorMessage","message","toString","toLowerCase","some","msg","includes","getSuggestedReply","_x","_getSuggestedReply","apply","arguments","_callee","prompt","maxRetries","apiParams","_apiParams$chooseATas","chooseATask","_apiParams$descriptio","description","_apiParams$emailConte","emailContent","_apiParams$additional","additionalInstructions","_apiParams$tone","tone","_apiParams$pointOfVie","pointOfView","_apiParams$anonymize","anonymize","_apiParams$incognito","incognito","_apiParams$default_la","default_language","_apiParams$should_str","requestBody","attempt","response","data","result","backoffDelay","_errorMessage","_backoffDelay","_backoffDelay2","_args","_context","undefined","should_stream","payload","console","log","concat","JSON","stringify","fetch","headers","body","ok","status","statusText","json","content","output","Math","pow","random","round","t0","_next","_throw"],"sourceRoot":""}